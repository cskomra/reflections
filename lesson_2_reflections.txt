What happens when you initialize a repository?  Why do you need to do it?

Git creates a file in the directory called .git.  It then used that file to keep track of changes made to other files that are registered as 'tracked' by Git.

How is the staging area different from the working directory and the repository?  What value do you think it offers?

When you add a file to the staging area, you tell Git:  Track changes on this file from this date.
The staging area is an easy way to let Git know this information.

How can you use the staging area to make sure you have one commit per logical change?

When done with one logical change, add all files to staging area.  Then commit changes.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

If I have several team members working on the code.  They can each work separately and then I could merge changes later for testing.  Branches would keep everything separate while not effecting previously released code.

How do the diagrams help you visualize the branch structure?

The diagrams make it clear the parents of each commit.

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?

Merging two branches together brings in all the commits from the second branch into the first branch combining it also with the current branch (if different).  Changes are merged in such a way as to keep new changes (both additions and deletions) from all branches being merged.  It is represented in the diagram to make it easy to see the "parent" commit.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

A pro of automatic merging is that it significantly decreases the amount of time I have to spend merging in other code.  The con is that it may not always be correct.